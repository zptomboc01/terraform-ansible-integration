# Code reference: https://spacelift.io/blog/github-actions-terraform

name: "Terraform Infrastructure CICD Pipeline"
 
on:
  push:
    branches:
    - main
    paths:
    - terraform/**
  pull_request:
    branches:
    - main
    paths:
    - terraform/**
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      skip_security_scan:
        description: 'Skip security scanning (emergency deployments only)'
        required: false
        default: false
        type: boolean
      log_level:
        description: 'Terraform log level'
        required: false
        default: 'INFO'
        type: choice
        options:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
 
env:
  # verbosity setting for Terraform logs
  TF_LOG: ${{ github.event.inputs.log_level || 'INFO' }}
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # Manual trigger environment
  TARGET_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  TERRAFORM_ACTION: ${{ github.event.inputs.terraform_action || 'plan' }}
 
jobs:
 validate:
   name: "Validation & Formatting"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       working-directory: ./terraform
   outputs:
     fmt-outcome: ${{ steps.fmt.outcome }}
     validate-outcome: ${{ steps.validate.outcome }}
 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v4
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v3
       with:
         terraform_version: latest

     - name: Cache Terraform providers
       uses: actions/cache@v3
       with:
         path: ~/.terraform.d/plugin-cache
         key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
         restore-keys: |
           ${{ runner.os }}-terraform-
    
     - name: Terraform init
       id: init
       run: terraform init
 
     - name: Terraform format check
       id: fmt
       run: terraform fmt -check -diff
    
     - name: Terraform validate
       id: validate
       run: terraform validate -json

 security-scan:
   name: "Security Scanning"
   runs-on: ubuntu-latest
   needs: validate
   if: github.event.inputs.skip_security_scan != 'true'
   permissions:
     security-events: write
     contents: read
   defaults:
     run:
       shell: bash
       working-directory: ./terraform
   outputs:
     checkov-outcome: ${{ steps.checkov.outcome }}
     tflint-outcome: ${{ steps.tflint.outcome }}
     ansible-lint-outcome: ${{ steps.ansible-lint.outcome }}

   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v4

     - name: Setup Python for security tools
       uses: actions/setup-python@v4
       with:
         python-version: '3.x'

     - name: Cache pip packages
       uses: actions/cache@v3
       with:
         path: ~/.cache/pip
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-checkov-ansible-lint
         restore-keys: |
           ${{ runner.os }}-pip-

     - name: Install security scanning tools
       run: |
         pip install checkov
         pip install ansible-lint

     - name: Run Checkov security scan
       id: checkov
       run: |
         # Run Checkov with CLI output for logs
         checkov -d . --framework terraform --output cli || true
         
         # Run Checkov again with SARIF output to file
         checkov -d . --framework terraform --output sarif > checkov-report.sarif || true
         
         echo "Files created:"
         ls -la || echo "Directory listing failed"
         if [ -f "checkov-report.sarif" ]; then
           echo "‚úÖ Checkov SARIF file created successfully ($(wc -c < checkov-report.sarif) bytes)"
         else
           echo "‚ùå Checkov SARIF file not found, creating empty SARIF file"
           echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "checkov"}}, "results": []}]}' > checkov-report.sarif
         fi
       continue-on-error: true

     - name: Upload Checkov SARIF results
       uses: github/codeql-action/upload-sarif@v3
       if: always() && hashFiles('checkov-report.sarif') != ''
       with:
         sarif_file: checkov-report.sarif
         category: checkov

     - name: Setup TFLint
       uses: terraform-linters/setup-tflint@v3
       with:
         tflint_version: v0.48.0
     
     - name: Initialize TFLint
       run: tflint --init

     - name: Run TFLint scan
       id: tflint
       run: tflint --format compact
       continue-on-error: true

     - name: Run Ansible Lint
       id: ansible-lint
       run: |
         # Run Ansible Lint with SARIF output
         ansible-lint test_playbook.yml --format sarif > ansible-lint-report.sarif || true
         
         echo "Ansible Lint files created:"
         if [ -f "ansible-lint-report.sarif" ]; then
           echo "‚úÖ Ansible Lint SARIF file created successfully ($(wc -c < ansible-lint-report.sarif) bytes)"
         else
           echo "‚ùå Ansible Lint SARIF file not found, creating empty SARIF file"
           echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "ansible-lint"}}, "results": []}]}' > ansible-lint-report.sarif
         fi
         ls -la *.sarif || echo "No SARIF files found"
       continue-on-error: true

     - name: Upload Ansible Lint SARIF results
       uses: github/codeql-action/upload-sarif@v3
       if: always() && hashFiles('ansible-lint-report.sarif') != ''
       with:
         sarif_file: ansible-lint-report.sarif
         category: ansible-lint

     - name: Security scan summary
       if: always()
       run: |
         echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
         echo "- Checkov: ${{ steps.checkov.outcome }}" >> $GITHUB_STEP_SUMMARY
         echo "- TFLint: ${{ steps.tflint.outcome }}" >> $GITHUB_STEP_SUMMARY
         echo "- Ansible Lint: ${{ steps.ansible-lint.outcome }}" >> $GITHUB_STEP_SUMMARY

 plan:
   name: "Terraform Plan"
   runs-on: ubuntu-latest
   needs: [validate, security-scan]
   if: |
     (github.event_name == 'pull_request') || 
     (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'plan')
   permissions:
     contents: read
     pull-requests: write
   defaults:
     run:
       shell: bash
       working-directory: ./terraform
   outputs:
     plan-outcome: ${{ steps.plan.outcome }}

   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v4
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v3
       with:
         terraform_version: latest

     - name: Cache Terraform providers
       uses: actions/cache@v3
       with:
         path: ~/.terraform.d/plugin-cache
         key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
         restore-keys: |
           ${{ runner.os }}-terraform-
    
     - name: Terraform init
       run: terraform init
 
     - name: Terraform plan
       id: plan
       run: |
         terraform plan -no-color -input=false -out=tfplan
         terraform show -no-color tfplan
       continue-on-error: true

     - name: Comment PR with plan results
       uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const output = `#### Terraform Format and Style üñå\`${{ needs.validate.outputs.fmt-outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`success\`
           #### Terraform Validation ü§ñ\`${{ needs.validate.outputs.validate-outcome }}\`
           #### Security Scans üîí
           - Checkov: \`${{ needs.security-scan.outputs.checkov-outcome }}\`
           - TFLint: \`${{ needs.security-scan.outputs.tflint-outcome }}\`
           - Ansible Lint: \`${{ needs.security-scan.outputs.ansible-lint-outcome }}\`
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

     - name: Display plan results for manual trigger
       if: github.event_name == 'workflow_dispatch'
       run: |
         echo "## üöÄ Manual Terraform Plan Results" >> $GITHUB_STEP_SUMMARY
         echo "### Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
         echo "### Plan Output:" >> $GITHUB_STEP_SUMMARY
         echo '```terraform' >> $GITHUB_STEP_SUMMARY
         terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY
         echo '```' >> $GITHUB_STEP_SUMMARY

     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1

 deploy:
   name: "Terraform Apply"
   runs-on: ubuntu-latest
   needs: [validate, security-scan]
   if: |
     (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
     (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply')
   permissions:
     contents: read
   defaults:
     run:
       shell: bash
       working-directory: ./terraform
   environment:
     name: ${{ github.event.inputs.environment || 'production' }}
     url: ${{ steps.output.outputs.url }}

   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v4
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v3
       with:
         terraform_version: latest

     - name: Cache Terraform providers
       uses: actions/cache@v3
       with:
         path: ~/.terraform.d/plugin-cache
         key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
         restore-keys: |
           ${{ runner.os }}-terraform-
    
     - name: Terraform init
       run: terraform init

     - name: Check security scan results
       if: needs.security-scan.result != 'skipped'
       run: |
         if [ "${{ needs.security-scan.outputs.checkov-outcome }}" = "failure" ]; then
           echo "‚ùå Checkov found critical security issues. Deployment blocked."
           exit 1
         fi
         echo "‚úÖ Security scans completed. Proceeding with deployment."

     - name: Display manual trigger info
       if: github.event_name == 'workflow_dispatch'
       run: |
         echo "## Manual Deployment Triggered" >> $GITHUB_STEP_SUMMARY
         echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
         echo "- **Action**: ${{ github.event.inputs.terraform_action }}" >> $GITHUB_STEP_SUMMARY
         echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
         echo "- **Skip Security**: ${{ github.event.inputs.skip_security_scan }}" >> $GITHUB_STEP_SUMMARY

     - name: Terraform Apply
       id: apply
       run: terraform apply -auto-approve -input=false

     - name: Get outputs
       id: output
       run: |
         echo "url=http://$(terraform output -raw web_server_ip)" >> $GITHUB_OUTPUT

 destroy:
  name: "Terraform Destroy"
  runs-on: ubuntu-latest
  needs: [validate]
  if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy'
  permissions:
    contents: read
  defaults:
    run:
      shell: bash
      working-directory: ./terraform
  environment:
    name: ${{ github.event.inputs.environment || 'production' }}

  steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v4

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Cache Terraform providers
      uses: actions/cache@v3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform init
      run: terraform init

    - name: Confirm destruction
      run: |
        echo "## ‚ö†Ô∏è DESTRUCTIVE OPERATION WARNING" >> $GITHUB_STEP_SUMMARY
        echo "About to destroy infrastructure in **${{ github.event.inputs.environment }}** environment" >> $GITHUB_STEP_SUMMARY
        echo "Triggered by: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Destroy
      id: destroy
      run: terraform destroy -auto-approve -input=false
